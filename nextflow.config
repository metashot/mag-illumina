params {
    /* Input and output options */
    reads = "data/*{1,2}.fastq.gz"     // input reads (FASTA/FASTQ, gzip and bzip2 compressed files also supported)
    outdir = "./results"               // output directory
    viralverify_db = "none"            // ViralVerify HMM db. 'none': download from Internet
                                       // (used if run_metaplasmidspades=true)
    single_end = false                 // true if the input reads are single-end
    interleaved = false                // true if the input paired-end reads are interleaved in a single file
    save_clean = false                 // export clean reads in the 'clean_reads' directory
    save_assember_output = false       // export the complete output of metaSPAdes, metaplasmidSPAdes or MEGAHIT 
    
    /* Cleaning options*/
    skip_cleaning = false              // skip read cleaning

    /* General assembly options */
    assembler = "metaspades"           // assembler ("metaspades" or "megahit"). metaSPAdes works only on 
                                       // paired-end reads.
    skip_assembly = false              // skip assembly (e.g. if you want to run metaplasmidspades only)
    run_metaplasmidspades = false      // run metaplasmidSpades and ViralVerify (paired-end reads only)

    /* metaSPAdes options */
    metaspades_k = "default"           // set metaSPAdes k-mer lengths manually (e.g. "21,33,55,77" for 2x150bp)
    metaspades_only_assembler = false  // Runs assembly module only (skip error correction)
    
        /* MEGAHIT options */
    megahit_k = "default"              // set MEGAHIT k-mer lengths manually (e.g. "27,37,47,57,67,77,87,97,107,117,127"
                                       // for large & complex metagenomes)
    
    /* Binning options */
    min_contig_size = 2500             // minimum contig size (>=1500)

    /* Limits */
    max_cpus = 16
    max_memory = 256.GB
    max_time = 96.h
}    


/* Docker options */
docker.enabled = true
docker.runOptions = '-u \$(id -u):\$(id -g)'


/* Import process configuration file*/
includeConfig 'process.config'


/* Manifest */
manifest {
    homePage = 'metashot.github.io'
    description = 'MAGs from Illumina sequences'
    mainScript = 'main.nf'
    version = '2.0.0'
}


/* Functions */
def check_max(obj, max) {
    // see https://github.com/nextflow-io/nextflow/issues/640
    if( obj instanceof nextflow.util.MemoryUnit ) {
        try {
            def max_type = max as nextflow.util.MemoryUnit
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max memory '${max}', using default value: $obj"
            return obj
        }   
    }
    if( obj instanceof nextflow.util.Duration ) {
        try {
            def max_type = max as nextflow.util.Duration
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max time '${max}', using default value $obj"
            return obj
        }         
    }
    if( obj instanceof Integer ) {
        try {
            return Math.min(obj, max as int)
        }   
        catch( all ) {
            println "ERROR: invalid max cpus '${max}', using default value $obj"
            return obj
        }         
    }    
}
